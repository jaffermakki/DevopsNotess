Cube.js is a modular, open-source framework for building analytical web applications. It uses JavaScript as its main programming language, and has a syntax that is similar to JavaScript.

The syntax in Cube.js consists of defining a data schema, which is used to specify the data that will be queried, as well as the calculations that will be performed on that data. The schema is defined using the Cube.js Schema Definition Language (SDL), which is a JSON-based syntax for defining data structures and calculations.

For example, you might define a schema for a sales database as follows:

cube(`Sales`, {
  sql: `
    SELECT
      date_trunc('day', created_at) as day,
      product,
      revenue
    FROM sales
  `,

  measures: {
    revenue: {
      type: `sum`,
      sql: `revenue`
    }
  },

  dimensions: {
    day: {
      type: `time`,
      sql: `day`
    },
    product: {
      type: `string`,
      sql: `product`
    }
  }
});


In this example, the cube function is used to define a cube named "Sales", and the sql property is used to specify the SQL query that will be executed to retrieve the data. The measures property is used to define calculations that will be performed on the data, in this case the sum of the revenue field. The dimensions property is used to define the dimensions that the data will be grouped by, in this case the day and product fields.

Once the schema has been defined, you can use Cube.js to build and execute queries, and retrieve the results in the format you need. This can be done through the Cube.js API, which provides a convenient, high-level interface for querying your data.



In Cube.js, you can add joins to your SQL query in the sql property of a cube definition. Joining tables in Cube.js works in the same way as it does in SQL.

Here's an example of how you could add a join to your SQL query in Cube.js:


cube(`Sales`, {
  sql: `
    SELECT
      date_trunc('day', sales.created_at) as day,
      sales.product,
      products.product_name,
      sales.revenue
    FROM sales
    JOIN products
    ON sales.product = products.product_id
  `,

  measures: {
    revenue: {
      type: `sum`,
      sql: `revenue`
    }
  },

  dimensions: {
    day: {
      type: `time`,
      sql: `day`
    },
    product: {
      type: `string`,
      sql: `product`
    },
    productName: {
      type: `string`,
      sql: `product_name`
    }
  }
});

In this example, we are joining the sales table with the products table on the product field in the sales table and the product_id field in the products table. The JOIN clause is specified in the SQL query using the JOIN keyword and the ON keyword to specify the join condition.

In addition to the join, we have added a new dimension to the schema named productName, which is based on the product_name field from the products table.

Note that you can add multiple joins to your SQL query if needed, simply by adding additional JOIN clauses to the query.
